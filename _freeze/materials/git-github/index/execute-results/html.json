{
  "hash": "5d7c532c0f090c4f5778b2706222224c",
  "result": {
    "markdown": "---\ntitle: \"Teaching data science with Git and GitHub\"\nsubtitle: \"posit::conf(2023) <br> Teaching Data Science Masterclass\"\nauthor: \"Mine √áetinkaya-Rundel\"\nfooter: \"[üîó pos.it/teach-ds-conf23](https://pos.it/teach-ds-conf23) / Module 2\"\nlogo: \"../images/logo.png\"\nformat: \n  revealjs:\n    theme: ../slides.scss\n    multiplex: true\n    transition: fade\n    slide-number: c\n    incremental: false \n    chalkboard: true\nexecute:\n  freeze: auto\n  echo: true\nknitr:\n  opts_chunk: \n    R.options:\n      width: 200\n---\n\n\n# Reproducibility in the classroom\n\n\n::: {.cell}\n\n:::\n\n\n## If you haven't yet done so\n\nPlease complete the survey collecting your GitHub user names!\n\n## Reproducibility checklist\n\n-   Are the tables and figures reproducible from the code and data?\n-   Does the code actually do what you think it does?\n-   In addition to what was done, is it clear *why* it was done? (e.g., how were parameter settings chosen?)\n-   Can the code be used for other data?\n-   Can you extend the code to do other things?\n\n## Ambitious goal + many other concerns\n\nWe need an environment where\n\n-   data, analysis, and results are tightly connected, or better yet, inseparable\n\n-   reproducibility is built in\n\n    -   the original data remains untouched\n    -   all data manipulations and analyses are inherently documented\n\n-   documentation is human readable and syntax is minimal\n\n## Roadmap\n\n-   Scriptability $\\rightarrow$ R [- ‚úÖ]{.fragment}\n-   Literate programming (code, narrative, output in one place) $\\rightarrow$ Quarto [- ‚úÖ]{.fragment}\n-   Version control $\\rightarrow$ Git / GitHub [-- this module!]{.fragment style=\"font-family: Brusher;\"}\n\n# Version control with Git + GitHub\n\n## Why Git + GitHub?\n\n-   **Version control:** Lots of mistakes along the way, need ability to revert\n-   **Collaboration:** Platform that removes barriers to well documented collaboration\n-   **Accountability:** Transparent commit history\n-   **Early introduction:**\n    -   Mastery takes time, earlier start the better\n    -   Marketability in industry\n\n## Goals\n\nIn addition to teaching good (and popular) data science workflows:\n\n::: incremental\n-   Centralize the distribution (and collection) of all student assignments\n\n-   Enable students to work collaboratively\n\n-   Make Git and GitHub part of student workflow\n\n-   Put students on a smooth path to open publishing of their project outputs\n:::\n\n# GitHub as your Learning Management System\n\n## Basic Structure\n\n![](images/github-org.png){fig-align=\"center\" width=\"800\"}\n\n## Setting up a course {.smaller}\n\n1.  Create a free course organization on GitHub: [github.com/organizations/new](https://github.com/organizations/new)\n2.  Get verified as a teacher: <https://education.github.com/discount_requests/application>\n3.  Once verified, upgrade your organization for free: <https://education.github.com/globalcampus/teacher>\n4.  Set member privileges in organization\n5.  Invite students to organization\n6.  Create assignment(s)\n7.  Collect assignments(s)\\*\\*\n8.  Grade assignment(s)\\*\\*\n\n## 1Ô∏è‚É£ Create course organization\n\nSelect the option for a free course organization.\n\n![](images/org-create.png){fig-alt=\"Screenshot of page to create GitHub organization.\" fig-align=\"center\" width=\"603\"}\n\n## 2Ô∏è‚É£ Get verified as a teacher\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/teacher-benefits-2.png){fig-alt=\"Screenshot of GitHub teacher benefits application.\" width=\"976\"}\n:::\n\n::: {.column width=\"50%\"}\n![](images/teacher-benefits-3.png){fig-alt=\"Screenshot of ID requirement in GitHub teacher benefits application.\" width=\"1557\"}\n:::\n:::\n\n## Required information\n\nYou will need to provide the following to request teacher benefits:\n\n-   A brief description of how you plan to use GitHub\n\n-   Establishing connection to an academic institution by verifying with a school-issued email address + school ID or some other proof of academic affiliation\n\n-   Information about the school - link to website, address, etc.\n\n::: callout-caution\n## Request verification early\n\nVerification is manual and can take up to a few days, do it well before your semester begins!\n:::\n\n## 3Ô∏è‚É£ Upgrade your organization\n\n![](images/org-upgrade.png){fig-align=\"center\" width=\"1000\"}\n\n## 4Ô∏è‚É£ Set member privileges\n\n![](images/member-priv1.png){fig-align=\"center\" width=\"1000\"}\n\n## 4Ô∏è‚É£ Set member privileges\n\n![](images/member-priv2.png){fig-align=\"center\" width=\"1000\"}\n\n## 4Ô∏è‚É£ Set member privileges\n\n![](images/member-priv3.png){fig-align=\"center\" width=\"1000\"}\n\n## 5Ô∏è‚É£ Invite students\n\n![](images/member-invite.png){fig-align=\"center\" width=\"1000\"}\n\n## Working with the GitHub UI can get tedious...\n\n-   Once you've set up your organization, automate redundant tasks by working directly with GitHub's immensely rich API!\n\n-   And do so from the comfort of your own home, i.e., using R.\n\n# Managing your GitHub organization with üì¶ ghclass\n\n## üì¶ [ghclass](https://rundel.github.io/ghclass/)\n\n**Tools for managing github class organization accounts**\n\n-   Made for instructors who use GitHub for class management, e.g., assignments distributed via GitHub repositories\n-   The package assumes that you're an R user, and you probably teach R as well, though that's not a requirement since this package is all about setting up repositories with the right permissions, not what your students put in those repositories\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# devtools::install_github(\"rundel/ghclass\") for dev version\n\ninstall.packages(\"ghclass\") \nlibrary(ghclass)\n```\n:::\n\n\n## Collect data from students\n\n-   Need students' GitHub `github_names` at a minimum\n\n-   Recommend also collecting their emails, as students tend to make typos in their GitHub `github_name`\n\n-   You can also use the `user_exists()` function to check for validity of usernames your students provide\n\n\n::: {.cell}\n\n```{.r .cell-code}\nuser_exists(\"florence-nightingale\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] TRUE\n```\n\n\n:::\n\n```{.r .cell-code}\nuser_exists(\"florence-nightinWale\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n## Prior to collecting data...\n\nYou need to instruct students to create GitHub accounts\n\n-   Consider data privacy rules of institution / country (e.g., you may need to enter a data protection agreement for GDPR compliance)\n\n-   Give some guidance for choosing a github_name\n\n    -   See \"github_name Advice\" on *Happy Git with R*: [happygitwithr.com/github-acct.html](https://happygitwithr.com/github-acct.html)\n\n-   Can have students choose and submit github_name as an in-class activity during the first week of classes\n\n## Behind the scenes: GitHub tokens\n\n`ghclass` uses the GitHub API to interact with your course organization and repos - the API verifies your identity using a personal access token which must be created and saved in such a way that `ghclass` can find and use it.\n\n-   Create a token\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::create_github_token()\n```\n:::\n\n\n-   Once created, save the `GITHUB_PAT` using\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngitcreds::gitcreds_set()\n```\n:::\n\n\n## Behind the scenes: GitHub tokens\n\n-   If the token is found and works correctly the following code should run without error\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngithub_test_token()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n‚úî Your GitHub PAT authenticated correctly.\n```\n\n\n:::\n:::\n\n\n-   If instead the token is invalid or not found, you will see something like the following\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngithub_test_token(\"MADE_UP_TOKEN\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n‚úñ Your GitHub PAT failed to authenticate.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n‚îî‚îÄGitHub API error (401):  Bad credentials\n```\n\n\n:::\n:::\n\n\n# Inviting students\n\n## Invite students\n\n-   This will generate an email to students.\n-   Instruct students to check their email and follow the instructions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norg <- \"data-sci-101\"\n```\n:::\n\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroster <- read_csv(\"survey-responses.csv\")\norg_invite(org = org, user = roster$github_name)\n```\n:::\n\n\n```         \n## ‚úî Invited user 'florence-nightingale' to org 'data-sci-101'.\n## ‚úî Invited user 'web-dubois' to org 'data-sci-101'.\n```\n\n## Check member status\n\n-   Who is already in?\n\n\n::: {.cell}\n\n```{.r .cell-code}\norg_members(org)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"aaronbaggett\"          \"abbicormier\"           \"alexCardazzi\"          \"ali-day\"               \"allissadillman\"        \"anaidech\"              \"andersolarsson\"        \"caalo\"                \n [9] \"catalamarti\"           \"cesBis\"                \"davonperson\"           \"deeprich\"              \"dkon1\"                 \"drtbibel\"              \"edward-burn\"           \"erinbugbee\"           \n[17] \"erwinlares\"            \"FulyaGokalp2\"          \"gcicc\"                 \"georgestagg\"           \"howarder\"              \"ibertchen\"             \"jakesauter\"            \"jeremymcwilliams\"     \n[25] \"jnese\"                 \"jns6eey\"               \"jonlinca\"              \"KenSaville\"            \"kriistiana\"            \"kyeager4\"              \"laylaguyot\"            \"lbozzone\"             \n[33] \"LibbyHeeren\"           \"math-mcshane\"          \"mccrea-cobb\"           \"mine-cetinkaya-rundel\" \"mkln\"                  \"murraylax\"             \"nickduran\"             \"norcalbiostat\"        \n[41] \"ritika-giri\"           \"sigurdurthorjonsson\"   \"tracykteal\"            \"web-dubois\"            \"wffadel\"              \n```\n\n\n:::\n:::\n\n\n-   Who still didn't accept their invitations?\n\n\n::: {.cell}\n\n```{.r .cell-code}\norg_pending(org)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"florence-nightingale\" \"amason30\"            \n```\n\n\n:::\n:::\n\n\n. . .\n\n::: callout-caution\n## All students should accept invites\n\nIt's recommended that all students accept their invite before you start creating repos for them so that they're all \"members\" not \"outside contributors\" -- will make book keeping easier for you as an instructor.\n:::\n\n# Creating assignments\n\n## Creating assignments - big picture\n\n-   Create a starter repo, keep it private and make it a template\n-   Clone the repo and add any starter files (template qmd, data, instructions, etc.)\n-   Commit and push your changes to the repo\n-   Use the `org_create_assignment()` function to create copies of the starter repo with correct permissions for each of your students (or teams)\n\n## Creating your starter repo\n\n![](images/starter-repo-create.png){fig-align=\"center\" width=\"1000\"}\n\n## Make your starter repo a template\n\n![](images/starter-repo-template.png){fig-align=\"center\" width=\"1000\"}\n\n## Prepare your starter repo\n\n::: demo\n{{< fa keyboard >}} **Demo:**\n\n-   Create a new repo: `hw-1`\n-   Clone it locally\n-   Add any necessary files\n-   Commit and push\n:::\n\n## Create assignments {.smaller}\n\n::: demo\n{{< fa keyboard >}} **Demo:**\n\n-   Invite everyone to the course organization\n-   Create a copy of the starter repo for each student, appending the student's `github_name` to the repo name\n-   Give write access to each student for their own repo\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassignment <- \"hw-1\"\n\n# to create repos like hw-1-florence-nightingale\norg_create_assignment(\n  org = org,\n  repo = paste0(assignment, \"-\", roster$github_name),\n  user = roster$github_name,\n  source_repo = paste0(org, \"/\", assignment)\n)\n```\n:::\n\n\n## No, seriously...\n\n::: callout-tip\n## Make your starter repo a template\n\nYou will regularly forget to do this, but try not to. It makes the next step A LOT faster, which is important especially for larger courses.\n:::\n\n-   If the starter repo is not a template, `org_create_assignment()` first clones the repo locally, than pushes to GitHub, which is slow.\n\n-   If the starter repo is a template, `org_create_assignment()`, copying happens on GitHub, which is a lot faster (and you can also use the GitHub UI to make copies on the fly)\n\n## Your turn! {.smaller}\n\n::: task\n**Your role:** Student\n\n**Set the scene:** You're a student in my class who is about to start working on their first assignment that requires the use of Git and GitHub. In this class, you access RStudio via Posit Cloud, which means your Posit Cloud account should be able to interact with your GitHub account.\n\n**Connect your Posit Cloud and GitHub accounts:**\n\n-   Go to [Posit Cloud](https://posit.cloud/spaces/406325/) and log in.\n-   Click on your profile avatar (top right) and then click on \"Authentication\".\n-   Under Login Options, check the box for \"Enabled\". This will open another window where you should click on \"Authorize rstudio\".\n-   Then, go back to the Posit Cloud authentication page, and check the box for \"Private repo access also enabled\".\n:::\n\n## Authorize Posit Cloud for your GitHub organization\n\n![](images/‚Äéauthorize-cloud.png){fig-align=\"center\"}\n\n## Your turn! {.smaller}\n\n::: task\n**Your role:** Student\n\n-   Go to the course organization on GitHub: [github.com/data-sci-101](https://github.com/data-sci-101), locate your HW 1 repo, and copy the HTTPS url of your repo.\n    -   If there is no GitHub repo created for you for this assignment, let me know!\n-   Go to Posit Cloud, click on New Project from Git Repository, paste the URL.\n-   Work through the **Getting Started** section, follow the instructions.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_97e6fc37\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1.5em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">15</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Create team assignments\n\n::: demo\n{{< fa keyboard >}} **Demo:**\n\n-   Create a copy of the starter repo for **each team**, appending the their `team_name` to the repo name\n\n-   Give write access to each student in a team for their own team repo\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nassignment <- \"lab-1\"\n\norg_create_assignment(\n  org = org,\n  repo = paste0(\"lab-1\", \"-\", roster$team_name),\n  user = roster$github_name,\n  team = roster$team_name,\n  source_repo = paste0(org, \"/\", assignment)\n)\n```\n:::\n\n\n## Your turn! {.smaller}\n\n::: task\n**Your role:** Student\n\n-   Go to the course organization on GitHub: [github.com/data-sci-101](https://github.com/data-sci-101).\n\n-   Locate your Lab 1, read through the **Getting Started** section, follow the instructions with your team members.\n\n    -   If there is no GitHub repo created for you/your team for this assignment, let me know!\n\n-   Clone the repo using HTTPS -- each person in a team should do this.\n\n-   Discuss Question 1 as a team, identify one team member as the scribe, and have them write up the answer and commit and push.\n\n-   Then, have all other team members pull that change.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_373973bc\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1.5em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n# Giving feedback\n\n## Options for giving feedback on GitHub\n\n-   Use the GitHub UI to add issues to each student's repo\n\n-   Instructors (and TAs) can view all repositories within the course organization with their `owner` role in a GitHub organization\n\n-   Make sure to `@` mention the student so that they are notified when an issue is opened\n\n-   Consider keeping points out of issues\n\n## Your turn! {.smaller}\n\n::: task\n**Your role:** Instructor\n\n-   First, I'll change everyone's permission level and make you `owner`s. (Please don't delete any repos!)\n-   Go to the GitHub organization for our \"class\" and observe that now you can see all repos.\n-   Go into the individual repo (HW 1) for your neighbor. Open an issue and add some text to the issue. In the issue `@` mention their `github_name`. Submit your issue.\n:::\n\n<br>\n\n::: task\n**Your role:** Student\n\nCheck your email to confirm that you got notified of an issue being filed by your neighbor in your repo, then review the issue in on GitHub.\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"countdown\" id=\"timer_f1374fe7\" data-update-every=\"1\" tabindex=\"0\" style=\"right:0;bottom:0;font-size:1.5em;\">\n<div class=\"countdown-controls\"><button class=\"countdown-bump-down\">&minus;</button><button class=\"countdown-bump-up\">&plus;</button></div>\n<code class=\"countdown-time\"><span class=\"countdown-digits minutes\">10</span><span class=\"countdown-digits colon\">:</span><span class=\"countdown-digits seconds\">00</span></code>\n</div>\n```\n\n:::\n:::\n\n\n## Other ghclass functionality\n\n::: demo\n{{< fa keyboard >}} **Demo:**\n\n**Clone** student repos to review their work locally\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhw1_repos <- org_repos(org, \"hw-1\")\nlocal_repo_clone(\n  hw01_repos, \n  local_path = \"hw1-submissions\"\n)\n```\n:::\n\n\n<br>\n\nGet big picture **statistics** for an assignment\n\n\n::: {.cell}\n\n```{.r .cell-code}\norg_repo_stats(org, filter = \"hw-1\")\n```\n:::\n\n:::\n\n## Git + GitHub lessons learned\n\n-   If you plan on using git in class, start on day one, don't wait until the \"right time\"\n-   First few assignment should be individual, not team based, to avoid merge conflicts\n-   Students need to remember to pull before starting work\n-   Use GitHub through the RStudio IDE, not command line to keep scope narrow\n-   Remind students on that future projects should go on GitHub with PI approval\n\n## Leverage the ecosystem even further\n\n-   Trigger a GitHub action every time a student pushes to their repo to render their document and provide high level \"rendered / didn't render\" type feedback automatically\n\n-   Fetch artifacts from actions to obtain (and grade) an independently, automatically rendered version of students' work for a high fidelity check on reproducibility\n\n# More resources\n\n## {{< fa cube >}} ghclass documentation {.smaller}\n\n\n```{=html}\n<iframe src=\"https://rundel.github.io/ghclass/reference/index.html\" title=\"ghclass documentation\" width=\"1000px\" height=\"550px\"></iframe>\n```\n\n## {{< fa file >}} Implementing version control with Git and GitHub as a learning objective in statistics and data science courses {.smaller}\n\n<br>\n\nBeckman, M. D. et. al. (2021). Implementing version control with Git and GitHub as a learning objective in statistics and data science courses. *Journal of Statistics and Data Science Education*, *29*(sup1), S132-S144. [https://doi.org/10.1080/10691898.2020.1848485](#0)\n\n> The various approaches described in the article span different implementation strategies to suit student background, course type, software choices, and assessment practices. By presenting a wide range of approaches to teaching Git, the article aims to serve as a resource for statistics and data science instructors teaching courses at any level within an undergraduate or graduate curriculum.\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/countdown-0.4.0/countdown.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/countdown-0.4.0/countdown.js\"></script>\n"
      ],
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}